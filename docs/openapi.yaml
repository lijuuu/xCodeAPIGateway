openapi: 3.0.3
info:
  title: User Authentication and Management API
  description: API for user authentication, profile management, social follow system, and admin operations.
  version: 1.0.0
servers:
  - url: /api/v1
    description: Base URL for all API endpoints

paths:
  # Public Authentication Routes
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/token/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token

  /auth/verify:
    get:
      summary: Verify user email
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified
        '400':
          description: Invalid token or email

  /auth/verify/resend:
    get:
      summary: Resend email verification
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Verification email resent
        '404':
          description: User not found

  /auth/password/forgot:
    get:
      summary: Request password reset
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Password reset email sent
        '404':
          description: User not found

  /auth/password/reset:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinishForgotPasswordRequest'
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid input or token

  # Protected User Routes
  /users/profile:
    get:
      summary: Get user profile
      security:
        - BearerAuth: []
      parameters:
        - name: userID
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

    put:
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

  /users/profile/image:
    patch:
      summary: Update profile image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileImageRequest'
      responses:
        '200':
          description: Profile image updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

  /users/profile/ban-history:
    get:
      summary: Get user's ban history
      security:
        - BearerAuth: []
      parameters:
        - name: userID
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Ban history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BanRecord'
        '401':
          description: Unauthorized

  /users/follow:
    post:
      summary: Follow a user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowUserRequest'
      responses:
        '200':
          description: Follow successful
        '400':
          description: Invalid followeeID
        '401':
          description: Unauthorized

    delete:
      summary: Unfollow a user
      security:
        - BearerAuth: []
      parameters:
        - name: followerID
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: followeeID
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unfollow successful
        '400':
          description: Invalid followeeID
        '401':
          description: Unauthorized

  /users/follow/following:
    get:
      summary: Get list of users followed
      security:
        - BearerAuth: []
      parameters:
        - name: userID
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: pageToken
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Following list retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          description: Unauthorized

  /users/follow/followers:
    get:
      summary: Get list of followers
      security:
        - BearerAuth: []
      parameters:
        - name: userID
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: pageToken
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Followers list retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          description: Unauthorized

  /users/security/password/change:
    post:
      summary: Change user password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /users/security/2fa:
    post:
      summary: Toggle two-factor authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleTwoFactorAuthRequest'
      responses:
        '200':
          description: 2FA toggled successfully
        '401':
          description: Unauthorized

  /users/search:
    get:
      summary: Search users
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          description: Unauthorized

  /users/logout:
    post:
      summary: Logout user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

  # Admin Routes
  /admin/login:
    post:
      summary: Login an admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginAdminRequest'
      responses:
        '200':
          description: Admin login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /admin/users:
    get:
      summary: Get all users
      security:
        - BearerAuth: []
      parameters:
        - name: pageToken
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: roleFilter
          in: query
          schema:
            type: string
            enum: [USER, ADMIN]
        - name: statusFilter
          in: query
          schema:
            type: string
            enum: [active, inactive, banned]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

    post:
      summary: Create a user (admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserAdminRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/update:
    put:
      summary: Update a user (admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserAdminRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/soft-delete:
    delete:
      summary: Soft delete a user (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: userID
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User soft deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/verify:
    post:
      summary: Verify a user (admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAdminUserRequest'
      responses:
        '200':
          description: User verified
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/unverify:
    post:
      summary: Unverify a user (admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnverifyUserAdminRequest'
      responses:
        '200':
          description: User unverified
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/ban:
    post:
      summary: Ban a user (admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanUserRequest'
      responses:
        '200':
          description: User banned
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/unban:
    post:
      summary: Unban a user (admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnbanUserRequest'
      responses:
        '200':
          description: User unbanned
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/ban-history:
    get:
      summary: Get ban history of a user (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: userID
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Ban history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BanRecord'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

components:
  schemas:
    Socials:
      type: object
      properties:
        github:
          type: string
        twitter:
          type: string
        linkedin:
          type: string

    RegisterUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        authType:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
      required:
        - firstName
        - lastName
        - email
        - authType
        - password
        - confirmPassword

    LoginUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    TokenRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    LogoutRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
      required:
        - userID

    VerifyUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        token:
          type: string
      required:
        - email
        - token

    ToggleTwoFactorAuthRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        password:
          type: string
        twoFactorAuth:
          type: boolean
      required:
        - userID
        - password
        - twoFactorAuth

    FinishForgotPasswordRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        token:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string
      required:
        - userID
        - token
        - newPassword
        - confirmPassword

    ChangePasswordRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        oldPassword:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string
      required:
        - userID
        - oldPassword
        - newPassword
        - confirmPassword

    LoginAdminRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    UpdateProfileRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        country:
          type: string
        primaryLanguageID:
          type: string
        muteNotifications:
          type: boolean
        socials:
          $ref: '#/components/schemas/Socials'
      required:
        - userID

    UpdateProfileImageRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        avatarURL:
          type: string
      required:
        - userID
        - avatarURL

    FollowUserRequest:
      type: object
      properties:
        followerID:
          type: string
          format: uuid
        followeeID:
          type: string
          format: uuid
      required:
        - followerID
        - followeeID

    CreateUserAdminRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        country:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        primaryLanguageID:
          type: string
        email:
          type: string
          format: email
        authType:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        muteNotifications:
          type: boolean
        socials:
          $ref: '#/components/schemas/Socials'
      required:
        - firstName
        - lastName
        - email
        - authType
        - password
        - confirmPassword
        - role

    UpdateUserAdminRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        country:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        email:
          type: string
          format: email
        password:
          type: string
        primaryLanguageID:
          type: string
        muteNotifications:
          type: boolean
        socials:
          $ref: '#/components/schemas/Socials'
      required:
        - userID

    BanUserRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        reason:
          type: string
        banType:
          type: string
          enum: [temporary, permanent]
        banReason:
          type: string
        bannedAt:
          type: integer
          format: int64
        banExpiry:
          type: integer
          format: int64
      required:
        - userID
        - banType
        - banReason

    UnbanUserRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
      required:
        - userID

    VerifyAdminUserRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
      required:
        - userID

    UnverifyUserAdminRequest:
      type: object
      properties:
        userID:
          type: string
          format: uuid
      required:
        - userID

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        userID:
          type: string
          format: uuid

    UserProfile:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        country:
          type: string
        primaryLanguageID:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [USER, ADMIN]
        status:
          type: string
          enum: [active, inactive, banned]
        muteNotifications:
          type: boolean
        socials:
          $ref: '#/components/schemas/Socials'

    BanRecord:
      type: object
      properties:
        banID:
          type: string
          format: uuid
        userID:
          type: string
          format: uuid
        banType:
          type: string
          enum: [temporary, permanent]
        banReason:
          type: string
        bannedAt:
          type: integer
          format: int64
        banExpiry:
          type: integer
          format: int64

    PaginatedUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        nextPageToken:
          type: string
        total:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT